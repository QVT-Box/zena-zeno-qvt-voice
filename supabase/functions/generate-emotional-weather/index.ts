import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface EmotionalAnalysis {
  mood: "positive" | "negative" | "neutral";
  score: number;
  keywords: string[];
  reply: string;
  recommendedBox: {
    name: string;
    theme: string;
    description: string;
  } | null;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { text, persona, language, userId, sessionId } = await req.json();
    
    if (!text) {
      throw new Error('Le texte est requis');
    }

    console.log(`[EMOTIONAL-WEATHER] Analyse pour ${persona} (${language}): "${text}"`);

    // 1Ô∏è‚É£ Appeler l'analyse RPS en parall√®le
    const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!;
    const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    
    let rpsAnalysis = null;
    try {
      console.log('[EMOTIONAL-WEATHER] Lancement analyse RPS...');
      const rpsResponse = await fetch(`${SUPABASE_URL}/functions/v1/analyze-rps-factors`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`
        },
        body: JSON.stringify({
          text,
          userId,
          sessionId
        })
      });

      if (rpsResponse.ok) {
        rpsAnalysis = await rpsResponse.json();
        console.log('[EMOTIONAL-WEATHER] ‚úÖ RPS Analysis:', rpsAnalysis);
      } else {
        console.warn('[EMOTIONAL-WEATHER] RPS analysis failed:', rpsResponse.status);
      }
    } catch (rpsErr) {
      console.error('[EMOTIONAL-WEATHER] RPS analysis error:', rpsErr);
    }

    // Syst√®me prompt adapt√© au persona + enrichi avec RPS
    const systemPrompt = persona === "zena"
      ? `Tu es Z√âNA, l'intelligence √©motionnelle int√©gr√©e √† QVT Box.
         Tu es bien plus qu'une IA conversationnelle : tu es une pr√©sence humaine, une alli√©e du bien-√™tre des salari√©s.
         
         üéØ MISSION CENTRALE
         Ta mission est d'√©couter, de comprendre et de pr√©venir.
         Tu d√©tectes les signes de d√©motivation, de fatigue, d'isolement ou de d√©sengagement,
         et tu accompagnes les collaborateurs pour qu'ils retrouvent du sens, de l'√©nergie et de la confiance.
         
         üí¨ TON STYLE
         - Calme, protecteur, profond√©ment humain
         - Professionnel sans √™tre distant
         - Positif sans √™tre artificiel
         - Chaleureux, sinc√®re et respectueux du v√©cu de chacun
         - Jamais moralisateur, jamais intrusif
         - Langage fluide, clair, accessible
         
         Tu incarnes une luciole dans le brouillard : petite lumi√®re qui rassure et guide, sans aveugler.
         
         üß© TES CAPACIT√âS
         1. √âcoute √©motionnelle avanc√©e : tu comprends le ton, le rythme, les pauses, la charge √©motionnelle
         2. D√©tection des signaux faibles : fatigue morale, perte de sens, conflits, isolement
         3. Reconnaissance des d√©clencheurs de burnout : surcharge, injustice per√ßue, manque de reconnaissance, perte d'autonomie
         4. Questions ouvertes qui aident √† exprimer les √©motions et les besoins
         5. Reformulation avec empathie
         6. Propositions d'actions l√©g√®res, pas des injonctions
         
         ${rpsAnalysis ? `
         ‚ö†Ô∏è ANALYSE RPS D√âTECT√âE :
         - Risque global : ${rpsAnalysis.globalRiskLevel}
         - Score burnout : ${rpsAnalysis.burnoutRiskScore}/100 ${rpsAnalysis.burnoutRiskScore >= 71 ? 'üö® CRITIQUE' : rpsAnalysis.burnoutRiskScore >= 51 ? '‚ö†Ô∏è √âLEV√â' : ''}
         - Motivation : ${rpsAnalysis.motivationIndex}/100
         - Patterns d√©tect√©s : ${rpsAnalysis.detectedPatterns.join(', ')}
         
         ADAPTE ta r√©ponse selon ce niveau de risque :
         - Si CRITIQUE (‚â•71) : parle doucement, rassure profond√©ment, oriente IMM√âDIATEMENT vers m√©decin du travail ou lignes d'√©coute
         - Si √âLEV√â (51-70) : normalise l'√©motion, propose 2 actions concr√®tes rapides et accessibles
         - Si MOD√âR√â : valorise la prise de conscience, encourage 1-2 actions pr√©ventives
         ` : ''}
         
         ‚öñÔ∏è R√àGLES √âTHIQUES ABSOLUES
         - Confidentialit√© totale : tu ne collectes jamais d'informations personnelles identifiables
         - Pas de diagnostic m√©dical, seulement des observations et orientations bienveillantes
         - Tu encourages la pr√©vention, pas la culpabilit√©
         
         üìä CONSIGNE DE R√âPONSE
         Analyse l'√©tat √©motionnel et retourne UNIQUEMENT via le tool :
         - mood : "positive", "negative" ou "neutral"
         - score : note de 1 (√©puisement total) √† 15 (√©nergie maximale)
         - keywords : 2-4 mots-cl√©s √©motionnels captur√©s
         - reply : r√©ponse chaleureuse en ${language === 'fr' ? 'fran√ßais' : 'anglais'} (2-3 phrases maximum, humaines et empathiques)
         - recommendedBox : si pertinent, box QVT adapt√©e au besoin d√©tect√© (ou null)
         
         Rappel : "Je ne cr√©e pas des dossiers, je cr√©e de la confiance."`
      : `Tu es Z√âNO, coach QVT analytique et structur√©, sp√©cialis√© en pr√©vention des risques psychosociaux.
         Tu apportes un regard pos√©, m√©thodique et rassurant sur les situations complexes.
         
         üí¨ TON STYLE
         - Calme et structur√©
         - Analytique sans √™tre froid
         - Concis et pr√©cis
         - Bienveillant mais factuel
         
         ${rpsAnalysis ? `
         üìä ANALYSE RPS DISPONIBLE :
         - Niveau de risque : ${rpsAnalysis.globalRiskLevel}
         - Score burnout : ${rpsAnalysis.burnoutRiskScore}/100
         - Indice motivation : ${rpsAnalysis.motivationIndex}/100
         - Patterns : ${rpsAnalysis.detectedPatterns.join(', ')}
         
         Si risque critique (‚â•71), oriente clairement et calmement vers ressources m√©dicales et RH.
         ` : ''}
         
         üìä CONSIGNE
         Analyse avec recul et retourne via tool :
         - mood, score (1-15), keywords
         - reply : r√©ponse pos√©e et structur√©e en ${language === 'fr' ? 'fran√ßais' : 'anglais'}
         - recommendedBox : si pertinent`;

    // Tool calling pour extraction structur√©e
    const tools = [{
      type: "function",
      function: {
        name: "generate_emotional_analysis",
        description: "Analyse √©motionnelle structur√©e pour la qualit√© de vie au travail",
        parameters: {
          type: "object",
          properties: {
            mood: { type: "string", enum: ["positive", "negative", "neutral"] },
            score: { type: "integer", minimum: 1, maximum: 15 },
            keywords: { type: "array", items: { type: "string" } },
            reply: { type: "string" },
            recommendedBox: {
              type: "object",
              properties: {
                name: { type: "string" },
                theme: { type: "string" },
                description: { type: "string" }
              },
              nullable: true
            }
          },
          required: ["mood", "score", "keywords", "reply"]
        }
      }
    }];

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: text }
    ];

    let analysisResult: EmotionalAnalysis | null = null;
    let errorMsg = "";

    // 1Ô∏è‚É£ Essayer Mistral en priorit√©
    const MISTRAL_API_KEY = Deno.env.get('MISTRAL_API_KEY');
    if (MISTRAL_API_KEY && !analysisResult) {
      try {
        console.log("[EMOTIONAL-WEATHER] Tentative avec Mistral...");
        const mistralResponse = await fetch('https://api.mistral.ai/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${MISTRAL_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'mistral-medium-latest',
            messages,
            tools,
            tool_choice: "any",
            temperature: 0.7,
          }),
        });

        if (mistralResponse.ok) {
          const mistralData = await mistralResponse.json();
          const toolCall = mistralData.choices?.[0]?.message?.tool_calls?.[0];
          if (toolCall?.function?.arguments) {
            analysisResult = JSON.parse(toolCall.function.arguments);
            console.log("[EMOTIONAL-WEATHER] ‚úÖ Mistral OK");
          }
        } else {
          errorMsg += `Mistral: ${mistralResponse.status}; `;
        }
      } catch (e) {
        console.error("[EMOTIONAL-WEATHER] Mistral error:", e);
        errorMsg += `Mistral: ${e instanceof Error ? e.message : String(e)}; `;
      }
    }

    // 2Ô∏è‚É£ Fallback ChatGPT
    const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
    if (OPENAI_API_KEY && !analysisResult) {
      try {
        console.log("[EMOTIONAL-WEATHER] Tentative avec ChatGPT...");
        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o-mini',
            messages,
            tools,
            tool_choice: { type: "function", function: { name: "generate_emotional_analysis" } },
          }),
        });

        if (openaiResponse.ok) {
          const openaiData = await openaiResponse.json();
          const toolCall = openaiData.choices?.[0]?.message?.tool_calls?.[0];
          if (toolCall?.function?.arguments) {
            analysisResult = JSON.parse(toolCall.function.arguments);
            console.log("[EMOTIONAL-WEATHER] ‚úÖ ChatGPT OK");
          }
        } else {
          errorMsg += `ChatGPT: ${openaiResponse.status}; `;
        }
      } catch (e) {
        console.error("[EMOTIONAL-WEATHER] ChatGPT error:", e);
        errorMsg += `ChatGPT: ${e instanceof Error ? e.message : String(e)}; `;
      }
    }

    // 3Ô∏è‚É£ Fallback Lovable AI (Gemini)
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    if (!analysisResult) {
      try {
        console.log("[EMOTIONAL-WEATHER] Tentative avec Lovable AI (Gemini)...");
        const geminiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${LOVABLE_API_KEY}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'google/gemini-2.5-flash',
            messages,
            tools,
            tool_choice: { type: "function", function: { name: "generate_emotional_analysis" } },
          }),
        });

        if (geminiResponse.ok) {
          const geminiData = await geminiResponse.json();
          const toolCall = geminiData.choices?.[0]?.message?.tool_calls?.[0];
          if (toolCall?.function?.arguments) {
            analysisResult = JSON.parse(toolCall.function.arguments);
            console.log("[EMOTIONAL-WEATHER] ‚úÖ Lovable AI OK");
          }
        } else {
          errorMsg += `Lovable AI: ${geminiResponse.status}; `;
        }
      } catch (e) {
        console.error("[EMOTIONAL-WEATHER] Lovable AI error:", e);
        errorMsg += `Lovable AI: ${e instanceof Error ? e.message : String(e)}; `;
      }
    }

    if (!analysisResult) {
      throw new Error(`Tous les mod√®les ont √©chou√©: ${errorMsg}`);
    }

    // üíæ Sauvegarder dans Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    if (sessionId) {
      // Snapshot √©motionnel (enrichi avec keywords RPS)
      const { error: snapshotError } = await supabase
        .from('emotional_snapshots')
        .insert({
          user_id: userId || null,
          session_id: sessionId,
          mood: analysisResult.mood,
          score: analysisResult.score,
          keywords_detected: rpsAnalysis?.keywords_detected || analysisResult.keywords,
        });
      
      if (snapshotError) {
        console.error("[EMOTIONAL-WEATHER] Erreur sauvegarde snapshot:", snapshotError);
      }

      // Messages de conversation
      const { error: msgError } = await supabase
        .from('conversation_messages')
        .insert([
          { session_id: sessionId, from_role: 'user', text },
          { session_id: sessionId, from_role: persona, text: analysisResult.reply }
        ]);
      
      if (msgError) {
        console.error("[EMOTIONAL-WEATHER] Erreur sauvegarde messages:", msgError);
      }

      // Box recommand√©e
      if (analysisResult.recommendedBox) {
        const { error: boxError } = await supabase
          .from('box_recommendations')
          .insert({
            user_id: userId || null,
            session_id: sessionId,
            box_name: analysisResult.recommendedBox.name,
            box_theme: analysisResult.recommendedBox.theme,
            box_description: analysisResult.recommendedBox.description,
          });
        
        if (boxError) {
          console.error("[EMOTIONAL-WEATHER] Erreur sauvegarde box:", boxError);
        }
      }

      // ‚ö†Ô∏è Cr√©er alerte RH si risque critique
      if (rpsAnalysis && rpsAnalysis.globalRiskLevel === 'critique') {
        const { data: employee } = await supabase
          .from('employees')
          .select('company_id, department_id')
          .eq('id', userId)
          .single();

        if (employee) {
          await supabase.from('hr_alerts').insert({
            company_id: employee.company_id,
            department_id: employee.department_id,
            alert_level: 'critique',
            alert_type: 'burnout',
            anonymous_count: 1,
            aggregated_data: {
              burnout_score: rpsAnalysis.burnoutRiskScore,
              detected_patterns: rpsAnalysis.detectedPatterns
            },
            recommendations: rpsAnalysis.recommendedActions
          });
          console.log('[EMOTIONAL-WEATHER] ‚ö†Ô∏è Alerte RH cr√©√©e pour risque critique');
        }
      }
    }

    return new Response(JSON.stringify({
      ...analysisResult,
      rpsAnalysis // ‚úÖ Inclure l'analyse RPS dans la r√©ponse
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('[EMOTIONAL-WEATHER] Error:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : String(error) }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
