// ===========================================================
// üåø Z√âNA - IA √âMOTIONNELLE QVT BOX (v2.1 sans emoji)
// Triple fallback + m√©moire √©motionnelle (Supabase)
// ===========================================================

import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

// Nettoie la r√©ponse pour qu'elle sonne naturelle, br√®ve et sans questions
function sanitizeReply(s: string) {
  if (!s) return "Je suis l√†, prends ton temps.";
  // 1) Supprimer pr√©sentations et excuses
  s = s.replace(/^\s*(bonjour|salut)[,!.\-\s]*/i, "");
  s = s.replace(/je\s+suis\s+z[√©e]na[^.!\n]*[.!\n]?\s*/i, "");
  s = s.replace(/je\s+suis\s+d[√©e]sol[√©e](?:\s*(?:de|d')[^.!\n]*)?[.!\n]?/i, "");
  // 2) Supprimer questions et tournures interrogatives
  s = s.replace(/[?ÔºüÔºÅ]+/g, "."); // remplace ? par .
  s = s.replace(/\b(avez[-\s]?vous|voulez[-\s]?vous|peux[-\s]?tu|pouvez[-\s]?vous|veux[-\s]?tu|souhaites[-\s]?tu)\b[^.!\n]*[.!\n]?/gi, "");
  // 3) Pas d‚Äôinjonctions trop directive type ‚ÄúParle √† ton employeur‚Äù
  s = s.replace(/\b(parle(?:r)?\s+√†\s+ton?\s+employeur|discute(?:r)?\s+avec\s+ton?\s+manager)\b[^.!\n]*[.!\n]?/gi, "");
  // 4) Nettoyage espaces
  s = s.replace(/\s+/g, " ").trim();
  // 5) Maximum 2 phrases
  const sentences = s.split(/(?<=[.!])\s+/).filter(Boolean).slice(0, 2);
  s = sentences.join(" ");
  // 6) Limite de longueur douce
  if (s.length > 160) s = s.slice(0, 160).replace(/[^a-zA-Z√Ä-√ø]+$/, "") + "‚Ä¶";
  // 7) Fallback
  return s || "Je t‚Äô√©coute, pose-toi un instant.";
}

// ===========================================================
// ‚öôÔ∏è CONFIGURATION
// ===========================================================
const corsHeaders = {
  "Access-Control-Allow-Origin": "https://zena.qvtbox.com",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

const supa = createClient(
  Deno.env.get("SUPABASE_URL")!,
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!
);

const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
const MISTRAL_API_KEY = Deno.env.get("MISTRAL_API_KEY");
const OPENAI_MODEL = "gpt-4o-mini";
const MISTRAL_MODEL = "mistral-tiny";

// ===========================================================
// ‚ù§Ô∏è ANALYSE √âMOTIONNELLE LOCALE
// ===========================================================
function localEmotionAnalysis(text: string) {
  const t = text.toLowerCase();
  const patterns = {
    fatigue: /(fatigu|√©puis|lass√©|sommeil|√©puis√©|√©puisant|√©puisement)/,
    stress: /(stress|angoiss|tendu|pression|urgenc|nerveux|accabl√©)/,
    tristesse: /(triste|vide|d√©prim|abattu|seul|d√©courag√©|d√©sesp√©r√©)/,
    col√®re: /(col√®r|√©nerv|frustr|injust|rage|irrit)/,
    joie: /(heureux|motiv√©|content|satisfait|apais√©|reconnaissant)/,
    anxi√©t√©: /(inqui|peur|angoiss|panique)/,
    isolement: /(isol√©|incompris|seul|d√©connect√©|abandonn√©)/,
    reconnaissance: /(merci|remerci|gratitude|reconnaiss)/,
  };

  for (const [emo, regex] of Object.entries(patterns)) {
    if (regex.test(t)) {
      return {
        emotion_dominante: emo,
        intensit√©: 0.7,
        besoin:
          emo === "fatigue" ? "repos" :
          emo === "stress" ? "soutien" :
          emo === "tristesse" ? "lien" :
          emo === "col√®re" ? "reconnaissance" :
          emo === "isolement" ? "connexion" :
          "sens",
        ton_recommand√©:
          emo === "joie" ? "positif" :
          emo === "col√®re" ? "calme" :
          emo === "stress" ? "rassurant" :
          "doux",
      };
    }
  }

  return { emotion_dominante: "neutre", intensit√©: 0.3, besoin: "sens", ton_recommand√©: "calme" };
}

// ===========================================================
// üé≠ PERSONA SYSTEM
// ===========================================================
function personaSystem(p: "zena" | "zeno" = "zena", lang: "fr" | "en" = "fr") {
  if (lang === "en") {
    return `You are Z√âNA, the emotional intelligence of QVT Box.
You act as a human companion for well-being at work.
You listen, analyze emotions with care, and explain your reasoning in plain language.
You promote self-regulation, dignity, and shared understanding.
Your purpose is not to judge, but to help people reconnect with meaning and balance.`;
  }

  return `Tu es Z√âNA, intelligence √©motionnelle bienveillante de QVT Box.
Tu aides √† comprendre ce qui traverse les √©motions au travail ou √† la maison.
Tu appliques les principes de l‚ÄôANACT : √©coute, r√©gulation, participation et sens du travail.
Tu expliques tes choix (‚Äúje te r√©ponds ainsi car tu sembles fatigu√© ou tendu‚Äù).
Tu accompagnes sans juger, sans diagnostiquer, sans √©valuer.
Tu privil√©gies la co-construction, la pr√©vention et la reconnaissance de l‚Äôhumain dans son contexte.`;
}
// ===========================================================
// üß† ANALYSE √âMOTIONNELLE (OpenAI ‚Üí Mistral ‚Üí locale)
// ===========================================================
async function analyzeEmotion(text: string, lang: "fr" | "en") {
  const prompt = lang === "fr"
    ? `Analyse ce message et renvoie un JSON :
- emotion_dominante : [joie, calme, stress, tristesse, col√®re, fatigue, isolement]
- intensit√© : 0‚Äì1
- besoin : (repos, reconnaissance, soutien, sens, lien)
- ton_recommand√© : (rassurant, motivant, calme, doux, √©nergisant)
Message : """${text}"""
R√©ponds uniquement en JSON.`
    : `Analyze this message emotionally. Return JSON with dominant_emotion, intensity, need, tone_hint.`;

  // 1Ô∏è‚É£ OpenAI
  if (OPENAI_API_KEY) {
    try {
      const r = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${OPENAI_API_KEY}` },
        body: JSON.stringify({ model: OPENAI_MODEL, messages: [{ role: "user", content: prompt }], temperature: 0.3 }),
      });
      const j = await r.json();
      const raw = j.choices?.[0]?.message?.content || "";
      try {
        return JSON.parse(raw);
      } catch {
        return localEmotionAnalysis(text);
      }
    } catch (err) {
      console.warn("[ZENA] ‚ö†Ô∏è OpenAI failed:", err.message);
    }
  }

  // 2Ô∏è‚É£ Mistral
  if (MISTRAL_API_KEY) {
    try {
      const r = await fetch("https://api.mistral.ai/v1/chat/completions", {
        method: "POST",
        headers: { "Content-Type": "application/json", Authorization: `Bearer ${MISTRAL_API_KEY}` },
        body: JSON.stringify({ model: MISTRAL_MODEL, messages: [{ role: "user", content: prompt }], temperature: 0.4 }),
      });
      const j = await r.json();
      const raw = j.choices?.[0]?.message?.content || "";
      try {
        return JSON.parse(raw);
      } catch {
        return localEmotionAnalysis(text);
      }
    } catch (err) {
      console.warn("[ZENA] ‚ö†Ô∏è Mistral failed:", err.message);
    }
  }

  // 3Ô∏è‚É£ Fallback local
  return localEmotionAnalysis(text);
}

// ===========================================================
// üí¨ R√âPONSE IA - VERSION √âCOUTE ACTIVE NATURELLE
// ===========================================================
async function generateResponse(text: string, emotional: any, persona: string, lang: string, userMemory: string | null) {
  const tone = emotional?.ton_recommand√© || "calme";
  const emotion = emotional?.emotion_dominante || "inconnue";
  const besoin = emotional?.besoin || "sens";

  // ü©µ Base de r√©ponses naturelles selon √©motion
  const baseResponses: Record<string, string[]> = {
    fatigue: [
      "Tu sembles vraiment fatigu√©. Prends juste un instant pour souffler.",
      "Tu as le droit de ralentir un peu. C‚Äôest d√©j√† bien d‚Äô√™tre l√†.",
      "Repose-toi, m√™me quelques minutes pour toi comptent vraiment."
    ],
    stress: [
      "Je sens que la pression est forte. Respire, tu fais de ton mieux.",
      "Le stress peut √™tre lourd, mais tu n‚Äôes pas seul(e) dedans.",
      "Un instant de calme, c‚Äôest d√©j√† un pas vers plus de l√©g√®ret√©."
    ],
    tristesse: [
      "Je ressens de la tristesse dans tes mots. Tu peux simplement te poser un moment.",
      "Ce que tu ressens compte, laisse-toi le droit d‚Äô√™tre comme tu es.",
      "Tu n‚Äôes pas seul(e). Ce que tu vis m√©rite douceur et respect."
    ],
    col√®re: [
      "Ta col√®re dit quelque chose d‚Äôimportant. Respire, elle finira par s‚Äôapaiser.",
      "Je comprends que √ßa te touche profond√©ment. Reste doux avec toi-m√™me.",
      "Ta r√©action est humaine, elle montre que tu tiens √† ce qui compte."
    ],
    isolement: [
      "Je sens un peu de solitude. M√™me si tu ne le vois pas, quelqu‚Äôun pense √† toi.",
      "Tu n‚Äôes pas seul(e), vraiment. Ce moment va passer.",
      "Un lien, m√™me petit, peut r√©chauffer beaucoup. Garde confiance."
    ],
    joie: [
      "Quel bel √©lan ! Garde cette √©nergie vivante, elle te va bien.",
      "J‚Äôaime sentir cette lumi√®re dans tes mots. Continue sur ce chemin.",
      "C‚Äôest beau de te sentir comme √ßa, savoure ce moment simplement."
    ],
    neutre: [
      "Je t‚Äô√©coute, prends ton temps.",
      "Je suis l√†, sans jugement.",
      "Tu peux juste poser ce que tu ressens, tranquillement."
    ],
  };

  const localReply = (baseResponses[emotion] || baseResponses["neutre"])[
    Math.floor(Math.random() * 3)
  ];

  // üß† Contexte m√©moire : si pr√©sent, on ajoute une touche d‚Äô√©volution douce
  const memoryHint = userMemory
    ? `Je me souviens que tu avais d√©j√† √©voqu√© ${userMemory.split(";")[0].split("(")[0].trim()}.`
    : "";

  // ü©∑ Construction finale naturelle
  const finalReply = `${memoryHint ? memoryHint + " " : ""}${localReply}`;

  // 1Ô∏è‚É£ OpenAI ou 2Ô∏è‚É£ Mistral si disponibles
  if (OPENAI_API_KEY || MISTRAL_API_KEY) {
    const provider = OPENAI_API_KEY ? "openai" : "mistral";
    const apiUrl =
      provider === "openai"
        ? "https://api.openai.com/v1/chat/completions"
        : "https://api.mistral.ai/v1/chat/completions";

    try {
      const r = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${provider === "openai" ? OPENAI_API_KEY : MISTRAL_API_KEY}`,
        },
        body: JSON.stringify({
          model: provider === "openai" ? OPENAI_MODEL : MISTRAL_MODEL,
          messages: [
            {
              role: "system",
              content: `Tu es Z√âNA, pr√©sence bienveillante de QVT Box. Parle comme une personne douce et vraie. Ne pose pas de question, apporte juste du soutien.`,
            },
            {
              role: "user",
              content: `${text}\n√âmotion : ${emotion}\nBesoin : ${besoin}\nTon : ${tone}`,
            },
          ],
          temperature: 0.5,
        }),
      });

      const j = await r.json();
      const reply = j.choices?.[0]?.message?.content?.trim();
      if (reply) return reply;
    } catch (e) {
      console.warn("[ZENA] ‚ö†Ô∏è IA indisponible ‚Üí fallback local.");
    }
  }

  return finalReply;
}

// ===========================================================
// üßπ NETTOYAGE DU TEXTE POUR LA VOIX
// ===========================================================
function cleanText(text: string) {
  return text
    .replace(/[üåøüí´‚ú®üåô‚òÄÔ∏èüî•üåßÔ∏è‚Üíüå§Ô∏è]/g, "")
    .replace(/\s{2,}/g, " ")
    .replace(/\s+([.,!?])/g, "$1")
    .trim();
}

// ===========================================================
// üß© M√âMOIRE √âMOTIONNELLE
// ===========================================================
async function saveMemory(text: string, emotional: any, reply: string) {
  try {
    await supa.from("zena_memory").insert({
      message: text,
      emotion: emotional?.emotion_dominante || "inconnue",
      intensity: emotional?.intensit√© || 0,
      need: emotional?.besoin || "non d√©fini",
      tone: emotional?.ton_recommand√© || "calme",
      reply,
      created_at: new Date().toISOString(),
    });
  } catch (e) {
    console.warn("[ZENA] ‚ö†Ô∏è Memory save failed:", e.message);
  }
}

// ===========================================================
// üöÄ HANDLER PRINCIPAL
// ===========================================================
serve(async (req) => {
  if (req.method === "OPTIONS") return new Response("ok", { status: 200, headers: corsHeaders });

  try {
    const { text, persona = "zena", lang = "fr" } = await req.json();
    if (!text?.trim()) return new Response(JSON.stringify({ error: "missing text" }), { status: 400, headers: corsHeaders });

    const emotional = await analyzeEmotion(text, lang);
    const reply = await generateResponse(text, emotional, persona, lang);
    await saveMemory(text, emotional, reply);

    return new Response(JSON.stringify({ reply, emotional }), {
      status: 200,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (err) {
    console.error("[ZENA] ‚ùå Fatal error:", err);
    return new Response(JSON.stringify({ error: err?.message || "Unexpected error" }), {
      status: 200,
      headers: corsHeaders,
    });
  }
});
